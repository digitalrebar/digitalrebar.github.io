[
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "In a 'test-lab' situation, is it better to have 2 network cards and let the host do the route\/nat\/firewall also ? aka the admin-ip becomes the gateway ?",
        "ts": "1499875177.955533"
    },
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "basically I'm thinking if I tell them this replaces the 'soho router' for testing... they'll grok it faster...",
        "ts": "1499875377.085980"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "That is how I kvm test - it also lets me then do isolated testing with DR as webproxy and without.",
        "ts": "1499877761.460159"
    },
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "so you do that 'with a vm' and 'on real' h\/w... it's the nesting of vm and the network stack as seems like lots of tools are now attempting to 'help' make adjustments... netstat -rn is showing me lots of adjustments... (more from VMware, VirtualBox and GNS3... so it's not really anything to do with DR, but through the DR scripts I'm finding out how you guys deal with those situations)",
        "ts": "1499878013.598185"
    },
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "Say... while I'm on my little network inception mind-bend... would you just PXE boot to recycle or use Mesos ? or go kubernetes... I know it 'depends' but was wondering when I watched your packet demo's how you would add additional packet servers to the test cluster (as you were just adding quem vm's in that video demo)",
        "ts": "1499878363.797194"
    },
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "seems like you guys have basically tested them all... seems like going back down to metal with PXE is the cleanest for recycle... I eventually want to attempt to recycle to move equipment to a new resource pool which I'm pretty sure you guys have done",
        "ts": "1499878616.941048"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "We usually recommend a complete rebuild.  Mesos should work because it handles dynamic works.  K8S is ideal.  workers are supposed to be replaceable.",
        "ts": "1499879307.336198"
    },
    {
        "text": "so that's why the drive to K8S demos then",
        "username": "ctrees",
        "bot_id": "B41PS9J94",
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499879401.388078"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "well - it is also becoming more popular than Mesos.  It appears.  Lots of movement there.",
        "ts": "1499879788.601089"
    },
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "So is Goiardi eventually going away ? which container drives the Annealing process ?  I take it server state status is keep in the protgres db then changes are change events that trigger the annealing... just not sure what service does it",
        "ts": "1499888306.349481"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "rebar-api drives annealing process.",
        "ts": "1499888426.408899"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "goiardi is a go-based chef server.  It is used by some roles and currently wonâ€™t go away for a while.",
        "ts": "1499888456.423833"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "rebar-api is a rails app that handles the API layer (mostly) and a set of worker threads do annealing.",
        "ts": "1499888502.445248"
    },
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "I noticed the consul, so I was wondering... you must have written the rebar-api pre terraform ?  (more evolution curiosity is all...)",
        "ts": "1499888893.643070"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "yes, but rebar-api does a lot more that terraform ever will and less at the same time.",
        "ts": "1499889069.734987"
    },
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "more the hope to avoid ruby... at least hashi started to put newer stuff in Go",
        "ts": "1499889120.762220"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "Well - the core of that rebar-api was started 8 years ago.",
        "ts": "1499889156.781398"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "We are moving it to go overtime.",
        "ts": "1499889180.794259"
    },
    {
        "type": "message",
        "user": "U62R1805P",
        "text": "which I know you guys are doing also (Go)... yea and you were ops guys so hard to avoid ruby 8 year...",
        "ts": "1499889193.801372"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "we needed an API endpoint that was the UI as well.  That pretty much meant rails or a really bad state of django or some java thing.",
        "ts": "1499889263.838486"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "I find terraform confounding.  It is good but unbounded.  Much like ansible.",
        "ts": "1499889344.882442"
    },
    {
        "type": "message",
        "user": "U02DGQYK1",
        "text": "You can do anything and everything and so people do and there is very low repeatability, testability, and abstraction.  It makes it really hard to isolate problems or operations.",
        "ts": "1499889421.923452"
    }
]